import { PaymentService } from './service/payment.service';
import { EventsService } from 'src/events/events.service';
import { RequestWithUser } from 'common/requests/request-with-user';
import { CreateEventPaymentDto } from './dto/event/create-event-payment.dto';
import { CreatePlacePaymentDto } from './dto/place/create-place-payment.dto';
import { PlacesService } from 'src/places/places.service';
import { PayoutDto } from './dto/payout.dto';
import { EventBuyerHistoryService } from 'src/event-buyer-history/event-buyer-history.service';
import { EventBoosterBuyerHistoryService } from 'src/event-booster-buyer-history/event-booster-buyer-history.service';
import { PlaceBuyerHistoryService } from 'src/places-buyer-history/place-buyer-history.service';
export declare class PaymentController {
    private readonly paymentService;
    private readonly eventService;
    private readonly eventBuyerHistoryService;
    private readonly eventBoosterBuyerHistoryService;
    private readonly placesService;
    private readonly placeBuyerHistoryService;
    constructor(paymentService: PaymentService, eventService: EventsService, eventBuyerHistoryService: EventBuyerHistoryService, eventBoosterBuyerHistoryService: EventBoosterBuyerHistoryService, placesService: PlacesService, placeBuyerHistoryService: PlaceBuyerHistoryService);
    findOne(id: string): Promise<{
        User: {
            id: number;
            createdAt: Date;
            status: import(".prisma/client").$Enums.EnumUserStatus;
            country: string | null;
            updatedAt: Date;
            firstName: string;
            lastName: string;
            email: string;
            password: string | null;
            phoneNumber: string | null;
            role: import(".prisma/client").$Enums.EnumUserRole;
            isSeller: boolean;
            isEmailConfirmed: boolean;
            isPhoneNumberConfirmed: boolean;
            isCountryConfirmed: boolean;
            emailVerifyToken: string | null;
            passwordResetToken: string | null;
        };
    } & {
        id: string;
        amount: number | null;
        createdAt: Date;
        updatedAt: Date;
        userId: number;
        isPaid: boolean;
        refId: string;
        context: import(".prisma/client").$Enums.PaymentContext | null;
        fee: number | null;
        fixRate: number | null;
        feeAmount: number | null;
        totalAmount: number | null;
        payerId: string | null;
        payerName: string | null;
        payerEmail: string | null;
        payerCountryCode: string | null;
        paidAt: Date | null;
        haveNextPayment: boolean | null;
        nextPaymentAmount: number | null;
        isNextPaymentPaid: boolean | null;
    }>;
    payout(payoutDto: PayoutDto): Promise<any>;
    createOrderForEventBuyer(req: RequestWithUser, createEventPaymentDto: CreateEventPaymentDto): Promise<{
        id: string;
        amount: number | null;
        createdAt: Date;
        updatedAt: Date;
        userId: number;
        isPaid: boolean;
        refId: string;
        context: import(".prisma/client").$Enums.PaymentContext | null;
        fee: number | null;
        fixRate: number | null;
        feeAmount: number | null;
        totalAmount: number | null;
        payerId: string | null;
        payerName: string | null;
        payerEmail: string | null;
        payerCountryCode: string | null;
        paidAt: Date | null;
        haveNextPayment: boolean | null;
        nextPaymentAmount: number | null;
        isNextPaymentPaid: boolean | null;
    }>;
    createOrderForSellerBoostingEvent(req: RequestWithUser, createEventPaymentDto: CreateEventPaymentDto): Promise<{
        id: string;
        amount: number | null;
        createdAt: Date;
        updatedAt: Date;
        userId: number;
        isPaid: boolean;
        refId: string;
        context: import(".prisma/client").$Enums.PaymentContext | null;
        fee: number | null;
        fixRate: number | null;
        feeAmount: number | null;
        totalAmount: number | null;
        payerId: string | null;
        payerName: string | null;
        payerEmail: string | null;
        payerCountryCode: string | null;
        paidAt: Date | null;
        haveNextPayment: boolean | null;
        nextPaymentAmount: number | null;
        isNextPaymentPaid: boolean | null;
    }>;
    createOrderForCustomerBokingngPlace(req: RequestWithUser, createPlacePaymentDto: CreatePlacePaymentDto): Promise<{
        id: string;
        amount: number | null;
        createdAt: Date;
        updatedAt: Date;
        userId: number;
        isPaid: boolean;
        refId: string;
        context: import(".prisma/client").$Enums.PaymentContext | null;
        fee: number | null;
        fixRate: number | null;
        feeAmount: number | null;
        totalAmount: number | null;
        payerId: string | null;
        payerName: string | null;
        payerEmail: string | null;
        payerCountryCode: string | null;
        paidAt: Date | null;
        haveNextPayment: boolean | null;
        nextPaymentAmount: number | null;
        isNextPaymentPaid: boolean | null;
    }>;
    approveOrder(orderID: string): Promise<{
        id: string;
        amount: number | null;
        createdAt: Date;
        updatedAt: Date;
        userId: number;
        isPaid: boolean;
        refId: string;
        context: import(".prisma/client").$Enums.PaymentContext | null;
        fee: number | null;
        fixRate: number | null;
        feeAmount: number | null;
        totalAmount: number | null;
        payerId: string | null;
        payerName: string | null;
        payerEmail: string | null;
        payerCountryCode: string | null;
        paidAt: Date | null;
        haveNextPayment: boolean | null;
        nextPaymentAmount: number | null;
        isNextPaymentPaid: boolean | null;
    }>;
}
