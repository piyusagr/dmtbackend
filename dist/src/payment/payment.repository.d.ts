import { Prisma } from '@prisma/client';
export declare class PaymentRepository {
    private logger;
    getPaymentSetting(): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        platformCharge: number;
        platformCurrency: string | null;
        platformCountryCode: string | null;
        domesticTransactionFee: number | null;
        internationalTransactionFee: number | null;
        payoutDomesticFee: number | null;
        payoutInternationalFee: number | null;
        currencyFixRate: number | null;
    }>;
    createPayment(paymentRecord: Prisma.PaymentCreateInput): Promise<{
        id: string;
        amount: number | null;
        createdAt: Date;
        updatedAt: Date;
        userId: number;
        isPaid: boolean;
        refId: string;
        context: import(".prisma/client").$Enums.PaymentContext | null;
        fee: number | null;
        fixRate: number | null;
        feeAmount: number | null;
        totalAmount: number | null;
        payerId: string | null;
        payerName: string | null;
        payerEmail: string | null;
        payerCountryCode: string | null;
        paidAt: Date | null;
        haveNextPayment: boolean | null;
        nextPaymentAmount: number | null;
        isNextPaymentPaid: boolean | null;
    }>;
    updatePayment(refId: string, paymentRecord: Prisma.PaymentUpdateInput): Promise<{
        id: string;
        amount: number | null;
        createdAt: Date;
        updatedAt: Date;
        userId: number;
        isPaid: boolean;
        refId: string;
        context: import(".prisma/client").$Enums.PaymentContext | null;
        fee: number | null;
        fixRate: number | null;
        feeAmount: number | null;
        totalAmount: number | null;
        payerId: string | null;
        payerName: string | null;
        payerEmail: string | null;
        payerCountryCode: string | null;
        paidAt: Date | null;
        haveNextPayment: boolean | null;
        nextPaymentAmount: number | null;
        isNextPaymentPaid: boolean | null;
    }>;
    findOneById(id: string): Promise<{
        User: {
            id: number;
            createdAt: Date;
            status: import(".prisma/client").$Enums.EnumUserStatus;
            country: string | null;
            updatedAt: Date;
            firstName: string;
            lastName: string;
            email: string;
            password: string | null;
            phoneNumber: string | null;
            role: import(".prisma/client").$Enums.EnumUserRole;
            isSeller: boolean;
            isEmailConfirmed: boolean;
            isPhoneNumberConfirmed: boolean;
            isCountryConfirmed: boolean;
            emailVerifyToken: string | null;
            passwordResetToken: string | null;
        };
    } & {
        id: string;
        amount: number | null;
        createdAt: Date;
        updatedAt: Date;
        userId: number;
        isPaid: boolean;
        refId: string;
        context: import(".prisma/client").$Enums.PaymentContext | null;
        fee: number | null;
        fixRate: number | null;
        feeAmount: number | null;
        totalAmount: number | null;
        payerId: string | null;
        payerName: string | null;
        payerEmail: string | null;
        payerCountryCode: string | null;
        paidAt: Date | null;
        haveNextPayment: boolean | null;
        nextPaymentAmount: number | null;
        isNextPaymentPaid: boolean | null;
    }>;
    findOneByRefId(refId: string): Promise<{
        id: string;
        amount: number | null;
        createdAt: Date;
        updatedAt: Date;
        userId: number;
        isPaid: boolean;
        refId: string;
        context: import(".prisma/client").$Enums.PaymentContext | null;
        fee: number | null;
        fixRate: number | null;
        feeAmount: number | null;
        totalAmount: number | null;
        payerId: string | null;
        payerName: string | null;
        payerEmail: string | null;
        payerCountryCode: string | null;
        paidAt: Date | null;
        haveNextPayment: boolean | null;
        nextPaymentAmount: number | null;
        isNextPaymentPaid: boolean | null;
    }>;
}
