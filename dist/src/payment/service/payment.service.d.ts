import { ConfigService } from '@nestjs/config';
import { PaymentRepository } from '../payment.repository';
import { SaveEventPaymentDto } from '../dto/event/save-event-payment.dto';
import { PayoutDto } from '../dto/payout.dto';
import { CreatePaymentDto } from '../dto/create-payment.dto';
import { CreatedPayment } from '../type/created-payment.type';
import { CapturedPayment } from '../type/captured-payment.type';
export declare class PaymentService {
    private readonly configService;
    private readonly paymentRepository;
    private logger;
    private readonly paypalBaseUrl;
    private readonly paypalClientId;
    private readonly paypalClientSecret;
    constructor(configService: ConfigService, paymentRepository: PaymentRepository);
    private generateAccessToken;
    createPayment(createPaymentDto: CreatePaymentDto): Promise<CreatedPayment>;
    capturePayment(orderID: string): Promise<CapturedPayment>;
    payout(payoutDto: PayoutDto): Promise<any>;
    getPaymentSetting(): Promise<{
        id: number;
        createdAt: Date;
        updatedAt: Date;
        platformCharge: number;
        platformCurrency: string | null;
        platformCountryCode: string | null;
        domesticTransactionFee: number | null;
        internationalTransactionFee: number | null;
        payoutDomesticFee: number | null;
        payoutInternationalFee: number | null;
        currencyFixRate: number | null;
    }>;
    savePaymentRecord(savePaymentDto: SaveEventPaymentDto): Promise<{
        id: string;
        amount: number | null;
        createdAt: Date;
        updatedAt: Date;
        userId: number;
        isPaid: boolean;
        refId: string;
        context: import(".prisma/client").$Enums.PaymentContext | null;
        fee: number | null;
        fixRate: number | null;
        feeAmount: number | null;
        totalAmount: number | null;
        payerId: string | null;
        payerName: string | null;
        payerEmail: string | null;
        payerCountryCode: string | null;
        paidAt: Date | null;
        haveNextPayment: boolean | null;
        nextPaymentAmount: number | null;
        isNextPaymentPaid: boolean | null;
    }>;
    updatePaymentRecord(refId: string, capturedPayment: CapturedPayment): Promise<{
        id: string;
        amount: number | null;
        createdAt: Date;
        updatedAt: Date;
        userId: number;
        isPaid: boolean;
        refId: string;
        context: import(".prisma/client").$Enums.PaymentContext | null;
        fee: number | null;
        fixRate: number | null;
        feeAmount: number | null;
        totalAmount: number | null;
        payerId: string | null;
        payerName: string | null;
        payerEmail: string | null;
        payerCountryCode: string | null;
        paidAt: Date | null;
        haveNextPayment: boolean | null;
        nextPaymentAmount: number | null;
        isNextPaymentPaid: boolean | null;
    }>;
    findOneById(id: string): Promise<{
        User: {
            id: number;
            createdAt: Date;
            status: import(".prisma/client").$Enums.EnumUserStatus;
            country: string | null;
            updatedAt: Date;
            firstName: string;
            lastName: string;
            email: string;
            password: string | null;
            phoneNumber: string | null;
            role: import(".prisma/client").$Enums.EnumUserRole;
            isSeller: boolean;
            isEmailConfirmed: boolean;
            isPhoneNumberConfirmed: boolean;
            isCountryConfirmed: boolean;
            emailVerifyToken: string | null;
            passwordResetToken: string | null;
        };
    } & {
        id: string;
        amount: number | null;
        createdAt: Date;
        updatedAt: Date;
        userId: number;
        isPaid: boolean;
        refId: string;
        context: import(".prisma/client").$Enums.PaymentContext | null;
        fee: number | null;
        fixRate: number | null;
        feeAmount: number | null;
        totalAmount: number | null;
        payerId: string | null;
        payerName: string | null;
        payerEmail: string | null;
        payerCountryCode: string | null;
        paidAt: Date | null;
        haveNextPayment: boolean | null;
        nextPaymentAmount: number | null;
        isNextPaymentPaid: boolean | null;
    }>;
    findOneByRefId(refId: string): Promise<{
        id: string;
        amount: number | null;
        createdAt: Date;
        updatedAt: Date;
        userId: number;
        isPaid: boolean;
        refId: string;
        context: import(".prisma/client").$Enums.PaymentContext | null;
        fee: number | null;
        fixRate: number | null;
        feeAmount: number | null;
        totalAmount: number | null;
        payerId: string | null;
        payerName: string | null;
        payerEmail: string | null;
        payerCountryCode: string | null;
        paidAt: Date | null;
        haveNextPayment: boolean | null;
        nextPaymentAmount: number | null;
        isNextPaymentPaid: boolean | null;
    }>;
}
