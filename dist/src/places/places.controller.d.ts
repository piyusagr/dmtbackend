import { PagnationDto } from '../../common/dto/pagnation.dto';
import { CreatePlaceDto } from './dto/create-place.dto';
import { GetPlaceQueryDto } from './dto/get-place.dto';
import { UpdatePlaceDto } from './dto/update-place.dto';
import { PlacesService } from './places.service';
import { RequestWithUser } from '../../common/requests/request-with-user';
export declare class PlacesController {
    private readonly placesService;
    private logger;
    constructor(placesService: PlacesService);
    create(req: RequestWithUser, createPlaceDto: CreatePlaceDto, photos: Array<Express.Multer.File>, res: Response): Promise<void>;
    getCreatedPlacesForSeller(sellerId: number, res: Response): Promise<void>;
    findAll(pagnation: PagnationDto): Promise<({
        user: {
            id: number;
            createdAt: Date;
            status: import(".prisma/client").$Enums.EnumUserStatus;
            country: string | null;
            updatedAt: Date;
            firstName: string;
            lastName: string;
            email: string;
            password: string | null;
            phoneNumber: string | null;
            role: import(".prisma/client").$Enums.EnumUserRole;
            isSeller: boolean;
            isEmailConfirmed: boolean;
            isPhoneNumberConfirmed: boolean;
            isCountryConfirmed: boolean;
            emailVerifyToken: string | null;
            passwordResetToken: string | null;
        };
        cover_image: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            original_name: string;
            url: string;
            mimetype: string;
            uid: string;
            file_key: string;
            eventListingId: string | null;
        };
        rooms: {
            id: number;
            createdAt: Date;
            title: string;
            price: number;
            stock: number;
            room_type: string;
            isDiscountAvailable: boolean;
            discount: number | null;
            transferService: import(".prisma/client").$Enums.EnumTransferService;
            extraAmount: number | null;
            place_id: number;
        }[];
        reviews: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            user_id: number;
            cleanliness: number;
            facilities: number;
            location: number;
            roomComfort: number;
            serviceQuality: number;
            valueForMoney: number;
            expierence_id: number | null;
        }[];
        bookings: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            status: import(".prisma/client").$Enums.BookingStatus;
            expierence_id: number | null;
            start_date: Date;
            end_date: Date;
            policy: import(".prisma/client").$Enums.BookingPolicy;
            total: number;
            seller_id: number;
            buyer_id: number;
        }[];
        images: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            original_name: string;
            url: string;
            mimetype: string;
            uid: string;
            file_key: string;
            eventListingId: string | null;
        }[];
        PlaceBuyerHistory: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isRefunded: boolean | null;
            paymentId: string;
            buyerId: number;
            isApproved: boolean | null;
            longOfStay: number | null;
            placeId: number;
        }[];
        _count: {
            user: number;
            cover_image: number;
            rooms: number;
            reviews: number;
            bookings: number;
            images: number;
            PlaceBuyerHistory: number;
        };
    } & {
        id: number;
        createdAt: Date;
        title: string;
        price: number | null;
        description: string;
        currency: string | null;
        place_type: string | null;
        street: string;
        city: string;
        province: string;
        postal_code: string;
        country: string;
        rating: number | null;
        subtitle: string | null;
        listing_status: import(".prisma/client").$Enums.ListingStats;
        booking_policy: import(".prisma/client").$Enums.BookingPolicy;
        latitude: number;
        longitude: number;
        businessNature: import(".prisma/client").$Enums.EnumBusinessNature;
        individualNbr: string | null;
        individualTaxIdNbr: string | null;
        businessRegistrationNbr: string | null;
        businessTaxIdNbr: string | null;
        updatedAt: Date | null;
        user_id: number;
        cover_image_id: number | null;
    })[]>;
    findAllActive(pagnation: PagnationDto): Promise<({
        user: {
            id: number;
            createdAt: Date;
            status: import(".prisma/client").$Enums.EnumUserStatus;
            country: string | null;
            updatedAt: Date;
            firstName: string;
            lastName: string;
            email: string;
            password: string | null;
            phoneNumber: string | null;
            role: import(".prisma/client").$Enums.EnumUserRole;
            isSeller: boolean;
            isEmailConfirmed: boolean;
            isPhoneNumberConfirmed: boolean;
            isCountryConfirmed: boolean;
            emailVerifyToken: string | null;
            passwordResetToken: string | null;
        };
        cover_image: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            original_name: string;
            url: string;
            mimetype: string;
            uid: string;
            file_key: string;
            eventListingId: string | null;
        };
        rooms: {
            id: number;
            createdAt: Date;
            title: string;
            price: number;
            stock: number;
            room_type: string;
            isDiscountAvailable: boolean;
            discount: number | null;
            transferService: import(".prisma/client").$Enums.EnumTransferService;
            extraAmount: number | null;
            place_id: number;
        }[];
        reviews: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            user_id: number;
            cleanliness: number;
            facilities: number;
            location: number;
            roomComfort: number;
            serviceQuality: number;
            valueForMoney: number;
            expierence_id: number | null;
        }[];
        bookings: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            status: import(".prisma/client").$Enums.BookingStatus;
            expierence_id: number | null;
            start_date: Date;
            end_date: Date;
            policy: import(".prisma/client").$Enums.BookingPolicy;
            total: number;
            seller_id: number;
            buyer_id: number;
        }[];
        images: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            original_name: string;
            url: string;
            mimetype: string;
            uid: string;
            file_key: string;
            eventListingId: string | null;
        }[];
        PlaceBuyerHistory: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isRefunded: boolean | null;
            paymentId: string;
            buyerId: number;
            isApproved: boolean | null;
            longOfStay: number | null;
            placeId: number;
        }[];
        _count: {
            user: number;
            cover_image: number;
            rooms: number;
            reviews: number;
            bookings: number;
            images: number;
            PlaceBuyerHistory: number;
        };
    } & {
        id: number;
        createdAt: Date;
        title: string;
        price: number | null;
        description: string;
        currency: string | null;
        place_type: string | null;
        street: string;
        city: string;
        province: string;
        postal_code: string;
        country: string;
        rating: number | null;
        subtitle: string | null;
        listing_status: import(".prisma/client").$Enums.ListingStats;
        booking_policy: import(".prisma/client").$Enums.BookingPolicy;
        latitude: number;
        longitude: number;
        businessNature: import(".prisma/client").$Enums.EnumBusinessNature;
        individualNbr: string | null;
        individualTaxIdNbr: string | null;
        businessRegistrationNbr: string | null;
        businessTaxIdNbr: string | null;
        updatedAt: Date | null;
        user_id: number;
        cover_image_id: number | null;
    })[]>;
    findPlaceImages(id: number): Promise<{
        user: {
            id: number;
            createdAt: Date;
            status: import(".prisma/client").$Enums.EnumUserStatus;
            country: string | null;
            updatedAt: Date;
            firstName: string;
            lastName: string;
            email: string;
            password: string | null;
            phoneNumber: string | null;
            role: import(".prisma/client").$Enums.EnumUserRole;
            isSeller: boolean;
            isEmailConfirmed: boolean;
            isPhoneNumberConfirmed: boolean;
            isCountryConfirmed: boolean;
            emailVerifyToken: string | null;
            passwordResetToken: string | null;
        };
        cover_image: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            original_name: string;
            url: string;
            mimetype: string;
            uid: string;
            file_key: string;
            eventListingId: string | null;
        };
        rooms: {
            id: number;
            createdAt: Date;
            title: string;
            price: number;
            stock: number;
            room_type: string;
            isDiscountAvailable: boolean;
            discount: number | null;
            transferService: import(".prisma/client").$Enums.EnumTransferService;
            extraAmount: number | null;
            place_id: number;
        }[];
        reviews: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            user_id: number;
            cleanliness: number;
            facilities: number;
            location: number;
            roomComfort: number;
            serviceQuality: number;
            valueForMoney: number;
            expierence_id: number | null;
        }[];
        bookings: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            status: import(".prisma/client").$Enums.BookingStatus;
            expierence_id: number | null;
            start_date: Date;
            end_date: Date;
            policy: import(".prisma/client").$Enums.BookingPolicy;
            total: number;
            seller_id: number;
            buyer_id: number;
        }[];
        images: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            original_name: string;
            url: string;
            mimetype: string;
            uid: string;
            file_key: string;
            eventListingId: string | null;
        }[];
        PlaceBuyerHistory: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isRefunded: boolean | null;
            paymentId: string;
            buyerId: number;
            isApproved: boolean | null;
            longOfStay: number | null;
            placeId: number;
        }[];
        _count: {
            user: number;
            cover_image: number;
            rooms: number;
            reviews: number;
            bookings: number;
            images: number;
            PlaceBuyerHistory: number;
        };
    } & {
        id: number;
        createdAt: Date;
        title: string;
        price: number | null;
        description: string;
        currency: string | null;
        place_type: string | null;
        street: string;
        city: string;
        province: string;
        postal_code: string;
        country: string;
        rating: number | null;
        subtitle: string | null;
        listing_status: import(".prisma/client").$Enums.ListingStats;
        booking_policy: import(".prisma/client").$Enums.BookingPolicy;
        latitude: number;
        longitude: number;
        businessNature: import(".prisma/client").$Enums.EnumBusinessNature;
        individualNbr: string | null;
        individualTaxIdNbr: string | null;
        businessRegistrationNbr: string | null;
        businessTaxIdNbr: string | null;
        updatedAt: Date | null;
        user_id: number;
        cover_image_id: number | null;
    }>;
    findOne(id: string, query: GetPlaceQueryDto): Promise<{
        user: {
            id: number;
            createdAt: Date;
            status: import(".prisma/client").$Enums.EnumUserStatus;
            country: string | null;
            updatedAt: Date;
            firstName: string;
            lastName: string;
            email: string;
            password: string | null;
            phoneNumber: string | null;
            role: import(".prisma/client").$Enums.EnumUserRole;
            isSeller: boolean;
            isEmailConfirmed: boolean;
            isPhoneNumberConfirmed: boolean;
            isCountryConfirmed: boolean;
            emailVerifyToken: string | null;
            passwordResetToken: string | null;
        };
        cover_image: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            original_name: string;
            url: string;
            mimetype: string;
            uid: string;
            file_key: string;
            eventListingId: string | null;
        };
        rooms: {
            id: number;
            createdAt: Date;
            title: string;
            price: number;
            stock: number;
            room_type: string;
            isDiscountAvailable: boolean;
            discount: number | null;
            transferService: import(".prisma/client").$Enums.EnumTransferService;
            extraAmount: number | null;
            place_id: number;
        }[];
        reviews: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            user_id: number;
            cleanliness: number;
            facilities: number;
            location: number;
            roomComfort: number;
            serviceQuality: number;
            valueForMoney: number;
            expierence_id: number | null;
        }[];
        bookings: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            status: import(".prisma/client").$Enums.BookingStatus;
            expierence_id: number | null;
            start_date: Date;
            end_date: Date;
            policy: import(".prisma/client").$Enums.BookingPolicy;
            total: number;
            seller_id: number;
            buyer_id: number;
        }[];
        images: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            original_name: string;
            url: string;
            mimetype: string;
            uid: string;
            file_key: string;
            eventListingId: string | null;
        }[];
        PlaceBuyerHistory: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isRefunded: boolean | null;
            paymentId: string;
            buyerId: number;
            isApproved: boolean | null;
            longOfStay: number | null;
            placeId: number;
        }[];
        _count: {
            user: number;
            cover_image: number;
            rooms: number;
            reviews: number;
            bookings: number;
            images: number;
            PlaceBuyerHistory: number;
        };
    } & {
        id: number;
        createdAt: Date;
        title: string;
        price: number | null;
        description: string;
        currency: string | null;
        place_type: string | null;
        street: string;
        city: string;
        province: string;
        postal_code: string;
        country: string;
        rating: number | null;
        subtitle: string | null;
        listing_status: import(".prisma/client").$Enums.ListingStats;
        booking_policy: import(".prisma/client").$Enums.BookingPolicy;
        latitude: number;
        longitude: number;
        businessNature: import(".prisma/client").$Enums.EnumBusinessNature;
        individualNbr: string | null;
        individualTaxIdNbr: string | null;
        businessRegistrationNbr: string | null;
        businessTaxIdNbr: string | null;
        updatedAt: Date | null;
        user_id: number;
        cover_image_id: number | null;
    }>;
    update(id: string, updatePlaceDto: UpdatePlaceDto, images: Express.Multer.File[]): Promise<{
        user: {
            id: number;
            createdAt: Date;
            status: import(".prisma/client").$Enums.EnumUserStatus;
            country: string | null;
            updatedAt: Date;
            firstName: string;
            lastName: string;
            email: string;
            password: string | null;
            phoneNumber: string | null;
            role: import(".prisma/client").$Enums.EnumUserRole;
            isSeller: boolean;
            isEmailConfirmed: boolean;
            isPhoneNumberConfirmed: boolean;
            isCountryConfirmed: boolean;
            emailVerifyToken: string | null;
            passwordResetToken: string | null;
        };
        cover_image: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            original_name: string;
            url: string;
            mimetype: string;
            uid: string;
            file_key: string;
            eventListingId: string | null;
        };
        rooms: {
            id: number;
            createdAt: Date;
            title: string;
            price: number;
            stock: number;
            room_type: string;
            isDiscountAvailable: boolean;
            discount: number | null;
            transferService: import(".prisma/client").$Enums.EnumTransferService;
            extraAmount: number | null;
            place_id: number;
        }[];
        reviews: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            user_id: number;
            cleanliness: number;
            facilities: number;
            location: number;
            roomComfort: number;
            serviceQuality: number;
            valueForMoney: number;
            expierence_id: number | null;
        }[];
        bookings: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            status: import(".prisma/client").$Enums.BookingStatus;
            expierence_id: number | null;
            start_date: Date;
            end_date: Date;
            policy: import(".prisma/client").$Enums.BookingPolicy;
            total: number;
            seller_id: number;
            buyer_id: number;
        }[];
        images: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            original_name: string;
            url: string;
            mimetype: string;
            uid: string;
            file_key: string;
            eventListingId: string | null;
        }[];
        PlaceBuyerHistory: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isRefunded: boolean | null;
            paymentId: string;
            buyerId: number;
            isApproved: boolean | null;
            longOfStay: number | null;
            placeId: number;
        }[];
        _count: {
            user: number;
            cover_image: number;
            rooms: number;
            reviews: number;
            bookings: number;
            images: number;
            PlaceBuyerHistory: number;
        };
    } & {
        id: number;
        createdAt: Date;
        title: string;
        price: number | null;
        description: string;
        currency: string | null;
        place_type: string | null;
        street: string;
        city: string;
        province: string;
        postal_code: string;
        country: string;
        rating: number | null;
        subtitle: string | null;
        listing_status: import(".prisma/client").$Enums.ListingStats;
        booking_policy: import(".prisma/client").$Enums.BookingPolicy;
        latitude: number;
        longitude: number;
        businessNature: import(".prisma/client").$Enums.EnumBusinessNature;
        individualNbr: string | null;
        individualTaxIdNbr: string | null;
        businessRegistrationNbr: string | null;
        businessTaxIdNbr: string | null;
        updatedAt: Date | null;
        user_id: number;
        cover_image_id: number | null;
    }>;
    remove(id: string): Promise<{
        id: number;
        createdAt: Date;
        title: string;
        price: number | null;
        description: string;
        currency: string | null;
        place_type: string | null;
        street: string;
        city: string;
        province: string;
        postal_code: string;
        country: string;
        rating: number | null;
        subtitle: string | null;
        listing_status: import(".prisma/client").$Enums.ListingStats;
        booking_policy: import(".prisma/client").$Enums.BookingPolicy;
        latitude: number;
        longitude: number;
        businessNature: import(".prisma/client").$Enums.EnumBusinessNature;
        individualNbr: string | null;
        individualTaxIdNbr: string | null;
        businessRegistrationNbr: string | null;
        businessTaxIdNbr: string | null;
        updatedAt: Date | null;
        user_id: number;
        cover_image_id: number | null;
    }>;
    removePlaceImage(placeId: string, assetId: number): Promise<{
        response: any;
        deletedImage: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            original_name: string;
            url: string;
            mimetype: string;
            uid: string;
            file_key: string;
            eventListingId: string | null;
        };
    }>;
}
