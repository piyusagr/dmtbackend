import { UpdateUserDto } from './dto/update-user.dto';
import { UpdateUserStatusDto } from './dto/update-user-status.dto';
import { UserEntity } from './entities/user.entity';
import { EnumUserRole } from '@prisma/client';
import { JwtUtilityService } from '../../common/services/jwt/jwt-utility.service';
import { TwilioService } from '../../common/services/twilio/twilio.service';
export declare class UsersService {
    private readonly jwtUtilityService;
    private readonly twilioService;
    constructor(jwtUtilityService: JwtUtilityService, twilioService: TwilioService);
    sendWhatsAppCode(user: UserEntity, country: string): Promise<any>;
    checkWhatsAppCode(user: UserEntity, code: string): Promise<any>;
    switchUserRoleBuyerSeller(user: UserEntity): Promise<any>;
    updateUserRole(userId: number, role: EnumUserRole, isSeller: boolean): Promise<any>;
    updateUserStatus(data: UpdateUserStatusDto): Promise<any>;
    updateCountry(userId: number, country: string): Promise<any>;
    create(data: any): Promise<{
        id: number;
        createdAt: Date;
        status: import(".prisma/client").$Enums.EnumUserStatus;
        country: string | null;
        updatedAt: Date;
        firstName: string;
        lastName: string;
        email: string;
        password: string | null;
        phoneNumber: string | null;
        role: import(".prisma/client").$Enums.EnumUserRole;
        isSeller: boolean;
        isEmailConfirmed: boolean;
        isPhoneNumberConfirmed: boolean;
        isCountryConfirmed: boolean;
        emailVerifyToken: string | null;
        passwordResetToken: string | null;
    }>;
    markEmailAsConfirmed(email: string): Promise<{
        id: number;
        createdAt: Date;
        status: import(".prisma/client").$Enums.EnumUserStatus;
        country: string | null;
        updatedAt: Date;
        firstName: string;
        lastName: string;
        email: string;
        password: string | null;
        phoneNumber: string | null;
        role: import(".prisma/client").$Enums.EnumUserRole;
        isSeller: boolean;
        isEmailConfirmed: boolean;
        isPhoneNumberConfirmed: boolean;
        isCountryConfirmed: boolean;
        emailVerifyToken: string | null;
        passwordResetToken: string | null;
    }>;
    getById(user_id: number): Promise<{
        id: number;
        createdAt: Date;
        status: import(".prisma/client").$Enums.EnumUserStatus;
        country: string | null;
        updatedAt: Date;
        firstName: string;
        lastName: string;
        email: string;
        password: string | null;
        phoneNumber: string | null;
        role: import(".prisma/client").$Enums.EnumUserRole;
        isSeller: boolean;
        isEmailConfirmed: boolean;
        isPhoneNumberConfirmed: boolean;
        isCountryConfirmed: boolean;
        emailVerifyToken: string | null;
        passwordResetToken: string | null;
    }>;
    getByEmail(email: string): Promise<{
        id: number;
        createdAt: Date;
        status: import(".prisma/client").$Enums.EnumUserStatus;
        country: string | null;
        updatedAt: Date;
        firstName: string;
        lastName: string;
        email: string;
        password: string | null;
        phoneNumber: string | null;
        role: import(".prisma/client").$Enums.EnumUserRole;
        isSeller: boolean;
        isEmailConfirmed: boolean;
        isPhoneNumberConfirmed: boolean;
        isCountryConfirmed: boolean;
        emailVerifyToken: string | null;
        passwordResetToken: string | null;
    }>;
    getByEmailAndToken(email: string, emailVerifyToken: string): Promise<{
        id: number;
        createdAt: Date;
        status: import(".prisma/client").$Enums.EnumUserStatus;
        country: string | null;
        updatedAt: Date;
        firstName: string;
        lastName: string;
        email: string;
        password: string | null;
        phoneNumber: string | null;
        role: import(".prisma/client").$Enums.EnumUserRole;
        isSeller: boolean;
        isEmailConfirmed: boolean;
        isPhoneNumberConfirmed: boolean;
        isCountryConfirmed: boolean;
        emailVerifyToken: string | null;
        passwordResetToken: string | null;
    }>;
    findAll(): Promise<{
        id: number;
        createdAt: Date;
        status: import(".prisma/client").$Enums.EnumUserStatus;
        country: string | null;
        updatedAt: Date;
        firstName: string;
        lastName: string;
        email: string;
        phoneNumber: string | null;
        role: import(".prisma/client").$Enums.EnumUserRole;
        isSeller: boolean;
        isEmailConfirmed: boolean;
        isPhoneNumberConfirmed: boolean;
        isCountryConfirmed: boolean;
        emailVerifyToken: string | null;
        passwordResetToken: string | null;
    }[]>;
    findByUserId(id: number): Promise<{
        id: number;
        createdAt: Date;
        status: import(".prisma/client").$Enums.EnumUserStatus;
        country: string | null;
        updatedAt: Date;
        firstName: string;
        lastName: string;
        email: string;
        password: string | null;
        phoneNumber: string | null;
        role: import(".prisma/client").$Enums.EnumUserRole;
        isSeller: boolean;
        isEmailConfirmed: boolean;
        isPhoneNumberConfirmed: boolean;
        isCountryConfirmed: boolean;
        emailVerifyToken: string | null;
        passwordResetToken: string | null;
    }>;
    update(id: number, updateUserDto: UpdateUserDto): Promise<{
        id: number;
        createdAt: Date;
        status: import(".prisma/client").$Enums.EnumUserStatus;
        country: string | null;
        updatedAt: Date;
        firstName: string;
        lastName: string;
        email: string;
        password: string | null;
        phoneNumber: string | null;
        role: import(".prisma/client").$Enums.EnumUserRole;
        isSeller: boolean;
        isEmailConfirmed: boolean;
        isPhoneNumberConfirmed: boolean;
        isCountryConfirmed: boolean;
        emailVerifyToken: string | null;
        passwordResetToken: string | null;
    }>;
    markPhoneNumberAsConfirmed(id: number): Promise<{
        id: number;
        createdAt: Date;
        status: import(".prisma/client").$Enums.EnumUserStatus;
        country: string | null;
        updatedAt: Date;
        firstName: string;
        lastName: string;
        email: string;
        password: string | null;
        phoneNumber: string | null;
        role: import(".prisma/client").$Enums.EnumUserRole;
        isSeller: boolean;
        isEmailConfirmed: boolean;
        isPhoneNumberConfirmed: boolean;
        isCountryConfirmed: boolean;
        emailVerifyToken: string | null;
        passwordResetToken: string | null;
    }>;
    remove(id: number): Promise<{
        id: number;
        createdAt: Date;
        status: import(".prisma/client").$Enums.EnumUserStatus;
        country: string | null;
        updatedAt: Date;
        firstName: string;
        lastName: string;
        email: string;
        password: string | null;
        phoneNumber: string | null;
        role: import(".prisma/client").$Enums.EnumUserRole;
        isSeller: boolean;
        isEmailConfirmed: boolean;
        isPhoneNumberConfirmed: boolean;
        isCountryConfirmed: boolean;
        emailVerifyToken: string | null;
        passwordResetToken: string | null;
    }>;
}
