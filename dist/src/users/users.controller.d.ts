import { Response } from 'express';
import { UsersService } from './users.service';
import { UpdateUserDto } from './dto/update-user.dto';
import { PlacesService } from '../places/places.service';
import { UpdateUserStatusDto } from './dto/update-user-status.dto';
import { RequestWithUser } from '../../common/requests/request-with-user';
import { CheckWhatsappCodeDto } from './dto/check-whatsapp-code.dto';
import { SendCodeDto } from './dto/send-code.dto';
export declare class UsersController {
    private readonly usersService;
    private readonly placesService;
    constructor(usersService: UsersService, placesService: PlacesService);
    sendWhatsAppCode(req: RequestWithUser, data: SendCodeDto, res: Response): Promise<void>;
    checkWhatsAppCode(req: RequestWithUser, data: CheckWhatsappCodeDto, res: Response): Promise<void>;
    switchUserRoleBuyerSeller(id: number, req: RequestWithUser, res: Response): Promise<void>;
    updateUserStatus(data: UpdateUserStatusDto, res: Response): Promise<void>;
    findAll(res: Response): Promise<void>;
    findOne(id: number, res: Response): Promise<void>;
    updateUserByUserId(id: number, updateUserDto: UpdateUserDto, res: Response): Promise<void>;
    updateProfile(req: RequestWithUser, updateUserDto: UpdateUserDto, res: Response): Promise<void>;
    findPlacesByUserId(userId: number): Promise<({
        user: {
            id: number;
            createdAt: Date;
            status: import(".prisma/client").$Enums.EnumUserStatus;
            country: string | null;
            updatedAt: Date;
            firstName: string;
            lastName: string;
            email: string;
            password: string | null;
            phoneNumber: string | null;
            role: import(".prisma/client").$Enums.EnumUserRole;
            isSeller: boolean;
            isEmailConfirmed: boolean;
            isPhoneNumberConfirmed: boolean;
            isCountryConfirmed: boolean;
            emailVerifyToken: string | null;
            passwordResetToken: string | null;
        };
        cover_image: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            original_name: string;
            url: string;
            mimetype: string;
            uid: string;
            file_key: string;
            eventListingId: string | null;
        };
        rooms: {
            id: number;
            createdAt: Date;
            title: string;
            price: number;
            stock: number;
            room_type: string;
            isDiscountAvailable: boolean;
            discount: number | null;
            transferService: import(".prisma/client").$Enums.EnumTransferService;
            extraAmount: number | null;
            place_id: number;
        }[];
        reviews: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            user_id: number;
            cleanliness: number;
            facilities: number;
            location: number;
            roomComfort: number;
            serviceQuality: number;
            valueForMoney: number;
            expierence_id: number | null;
        }[];
        bookings: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            status: import(".prisma/client").$Enums.BookingStatus;
            expierence_id: number | null;
            start_date: Date;
            end_date: Date;
            policy: import(".prisma/client").$Enums.BookingPolicy;
            total: number;
            seller_id: number;
            buyer_id: number;
        }[];
        images: {
            id: number;
            createdAt: Date;
            place_id: number | null;
            original_name: string;
            url: string;
            mimetype: string;
            uid: string;
            file_key: string;
            eventListingId: string | null;
        }[];
        PlaceBuyerHistory: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            isRefunded: boolean | null;
            paymentId: string;
            buyerId: number;
            isApproved: boolean | null;
            longOfStay: number | null;
            placeId: number;
        }[];
        _count: {
            user: number;
            cover_image: number;
            rooms: number;
            reviews: number;
            bookings: number;
            images: number;
            PlaceBuyerHistory: number;
        };
    } & {
        id: number;
        createdAt: Date;
        title: string;
        price: number | null;
        description: string;
        currency: string | null;
        place_type: string | null;
        street: string;
        city: string;
        province: string;
        postal_code: string;
        country: string;
        rating: number | null;
        subtitle: string | null;
        listing_status: import(".prisma/client").$Enums.ListingStats;
        booking_policy: import(".prisma/client").$Enums.BookingPolicy;
        latitude: number;
        longitude: number;
        businessNature: import(".prisma/client").$Enums.EnumBusinessNature;
        individualNbr: string | null;
        individualTaxIdNbr: string | null;
        businessRegistrationNbr: string | null;
        businessTaxIdNbr: string | null;
        updatedAt: Date | null;
        user_id: number;
        cover_image_id: number | null;
    })[]>;
    remove(id: number): Promise<{
        id: number;
        createdAt: Date;
        status: import(".prisma/client").$Enums.EnumUserStatus;
        country: string | null;
        updatedAt: Date;
        firstName: string;
        lastName: string;
        email: string;
        password: string | null;
        phoneNumber: string | null;
        role: import(".prisma/client").$Enums.EnumUserRole;
        isSeller: boolean;
        isEmailConfirmed: boolean;
        isPhoneNumberConfirmed: boolean;
        isCountryConfirmed: boolean;
        emailVerifyToken: string | null;
        passwordResetToken: string | null;
    }>;
}
